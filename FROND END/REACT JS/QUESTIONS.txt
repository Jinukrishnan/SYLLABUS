

 1. What is React.js, and what are its key features? 
   - React is an open-source JavaScript library for building user interfaces.
   - Key features include a virtual DOM, component-based architecture, and reusability.

 2. What is JSX, and how does it differ from HTML? 
   - JSX is a syntax extension for JavaScript that allows you to write HTML-like code in your JavaScript files.
   - JSX is transpiled to JavaScript using tools like Babel.

 3. What is a component in React? 
   - A component is a self-contained, reusable piece of UI that can be composed together to build complex user interfaces.

 4. Explain the difference between functional components and class components. 
   - Functional components are simpler, use function syntax, and are stateless.
   - Class components use class syntax and can have state and lifecycle methods.

 5. What is the virtual DOM, and how does it work? 
   - The virtual DOM is a lightweight representation of the actual DOM.
   - React compares the virtual DOM with the real DOM and updates only the differences, improving performance.

 6. How do you pass data from a parent component to a child component in React? 
   - Props are used to pass data from parent to child components.

 7. What is state in React, and how is it different from props? 
   - State is used for data that can change within a component. Props are used for data that is passed from a parent component.
   - State is mutable, while props are read-only.

 8. Explain the component lifecycle methods in React. 
   - Common lifecycle methods include `componentDidMount`, `componentDidUpdate`, and `componentWillUnmount`.

 9. What is a controlled component in React? 
   - A controlled component is a component whose value is controlled by the state of the application, and it updates the UI based on state changes.

 10. What is the purpose of keys in React lists? 
    - Keys are used to help React identify which items have changed, been added, or been removed from a list, optimizing the rendering process.

 11. How does React handle events? 
    - React uses synthetic events to handle browser events consistently across different browsers.

 12. What is a higher-order component (HOC) in React? 
    - A higher-order component is a function that takes a component and returns a new component with enhanced features.

 13. Explain React Router and its key components. 
    - React Router is a library for adding routing to React applications.
    - Key components include `BrowserRouter`, `Route`, and `Link`.

 14. How can you optimize performance in React applications? 
    - Techniques like code splitting, lazy loading, and using PureComponent or memoization can help improve performance.

 15. What are hooks in React, and why are they important? 
    - Hooks are functions that allow functional components to manage state and side effects.
    - Popular hooks include `useState`, `useEffect`, and `useContext`.

 16. What are the differences between React and React Native? 
    - React is used for web applications, while React Native is used for building mobile applications.
    - React Native uses native components to render UI elements.

 17. What is Redux, and when might you use it in a React application? 
    - Redux is a state management library for React.
    - Use Redux when you need to manage complex application state that needs to be shared across multiple components.

 18. What are some common challenges in React development, and how would you address them? 
    - Common challenges include performance optimization, state management, and complex component interactions.
    - Solutions might involve using profiling tools, optimizing component rendering, or using state management libraries.
